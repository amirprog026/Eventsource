# Date: 2024-9-24
# Author: Generated by GoCodeo.

import unittest ,json

from app import app, queue_event 

from unittest.mock import patch 

class TestEventResource(unittest.TestCase):

    @patch('app.queue_event')
    def test_post_valid_event(self, mock_queue_event):
        app.testing = True
        client = app.test_client()
        valid_event = {
            'eventid': '12345',
            'eventtype': 'typeA',
            'source': 'sourceA',
            'user': 'userA',
            'metadata': {'key': 'value'}
        }
        response = client.post('/event', json=valid_event)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.get_json(), {'message': 'Event queued successfully'})
        mock_queue_event.assert_called_once_with(valid_event) 


    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_post_valid_event(self):
        valid_event = {
            'eventid': '12345',
            'eventtype': 'test_event',
            'source': 'test_source',
            'metadata': {},
            'user': 'test_user'
        }
        response = self.app.post('/event', data=json.dumps(valid_event), content_type='application/json')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json, {'message': 'Event queued successfully'}) 


    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_post_valid_event(self):
        valid_event = {
            'eventid': '123',
            'eventtype': 'test_event',
            'source': 'test_source',
            'user': 'test_user',
            'metadata': {}
        }
        response = self.app.post('/event', data=json.dumps(valid_event), content_type='application/json')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json, {'message': 'Event queued successfully'}) 


    @patch('app.queue_event')
    def test_post_multiple_events(self, mock_queue_event):
        client = app.test_client()
        events = [
            {'eventid': '1', 'eventtype': 'type1', 'source': 'source1', 'metadata': {}, 'user': 'user1'},
            {'eventid': '2', 'eventtype': 'type2', 'source': 'source2', 'metadata': {}, 'user': 'user2'}
        ]
        for event in events:
            response = client.post('/event', json=event)
            self.assertEqual(response.status_code, 200)
            self.assertEqual(response.get_json(), {'message': 'Event queued successfully'})
        self.assertEqual(mock_queue_event.call_count, len(events)) 


    @patch('app.queue_event')
    def test_post_event_success(self, mock_queue_event):
        app.testing = True
        client = app.test_client()
        valid_event = {
            'eventid': '123',
            'eventtype': 'typeA',
            'source': 'sourceA',
            'metadata': {'key': 'value'},
            'user': 'userA'
        }
        response = client.post('/event', json=valid_event)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.get_json(), {'message': 'Event queued successfully'})
        mock_queue_event.assert_called_once_with(valid_event) 


    @patch('app.queue_event')
    def test_post_event(self, mock_queue_event):
        app.testing = True
        with app.test_client() as client:
            response = client.post('/event', json={
                'eventid': '123',
                'eventtype': 'typeA',
                'source': 'sourceA',
                'user': 'userA',
                'metadata': {'key': 'value'}
            })
            self.assertEqual(response.status_code, 200)
            self.assertEqual(response.get_json(), {'message': 'Event queued successfully'})
            mock_queue_event.assert_called_once_with({
                'eventid': '123',
                'eventtype': 'typeA',
                'source': 'sourceA',
                'user': 'userA',
                'metadata': {'key': 'value'}
            }) 


 #edge cases  
class TestEventResourceEdgeCase(unittest.TestCase):#with extra fields in the JSON body
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_post_with_extra_fields(self):
        response = self.app.post('/event',
            data=json.dumps({
                'eventid': '123',
                'eventtype': 'typeA',
                'source': 'sourceA',
                'user': 'userA',
                'metadata': {},
                'extra_field': 'extra_value'
            }),
            content_type='application/json'
        )
        self.assertEqual(response.status_code, 200)
        self.assertIn('Event queued successfully', str(response.data))

class TestEventResourceGet(unittest.TestCase):#non existing type
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_get_non_existing_eventtype(self):
        response = self.app.get('/event?eventtype=non_existing_type')
        self.assertEqual(response.status_code, 404)
        self.assertEqual(json.loads(response.data), {'message': 'No events found'})
class TestEventResource(unittest.TestCase):#missing field
    def setUp(self):
        self.app = app.test_client()
        self.app.testing = True

    def test_post_missing_fields(self):
        response = self.app.post('/event', json={})
        self.assertEqual(response.status_code, 400)
        self.assertIn('Invalid input', response.get_data(as_text=True))